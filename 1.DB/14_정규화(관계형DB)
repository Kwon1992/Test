제1정규화(1NF) : 한 칸엔 하나의 데이터만 넣는다 
=> 제1정규화를 거친 테이블을 [제1정규형 테이블]이라고 한다.

제2정규화(2NF) : 현제 테이블의 주제와 관련없는 컬럼을 별도의 테이블로 옮김(partial dependency를 제거한 테이블)
* partial dependency? 하나의 composite primary key에 종속된 컬럼을 partial dependency라고 함.
* composite primary key? 2개 이상의 컬럼을 조합하여 primary key 역할을 할 수 있게 하는 것
=> 제1정규화를 거친 테이블을 [제2정규형 테이블]이라고 한다.
=> 원하는 정보를 얻기 위해서 테이블 간 JOIN을 해야하는 경우가 발생한다.


제2정규형의 교과서적 정의는 partial dependency를 제거한 테이블입니다. 

쉽게 설명해보자면 

1. composite primary key 라는게 있습니다.
primary key는 행을 서로 구분할 수 있는 유니크한 데이터를 담고있는 컬럼입니다. 
근데 가끔은 하나의 컬럼만으로 primary key를 정할 수 없는 경우가 있습니다. 


[수강등록현황 table]

회원번호	회원이름	프로그램	가격	납부여부
101	강호동	스쿼시초급	5000	0
102	손흥민	헬스	6000	1
103	김민수	헬스	6000	1
103	김민수	골프초급	8000	0
 
▲ 위의 테이블에선 (회원번호 + 프로그램) 이렇게 조합해야 primary key 역할을 수행할 수 있습니다.
'회원번호' 만으로 primary key 역할은 불가능합니다.
'프로그램' 만으로 primary key 역할은 불가능합니다. 
근데 두개 합치면 primary key 역할 가능 
두개 컬럼을 합친 primary key를 composite primary key 라고 합니다. 

 
2. composite primary key 중에 하나의 컬럼에만 종속되어 있는 따까리 컬럼을 partial dependency가 있다고 표현합니다. 

------------------------------------------------------------------------
[수강등록현황 table]
회원번호	회원이름	프로그램	가격	납부여부
101	강호동	스쿼시초급	5000	0
102	손흥민	헬스	6000	1
103	김민수	헬스	6000	1
103	김민수	골프초급	8000	0
 
▲ 예를 들어 위의 테이블에서 보면 '가격' 컬럼은 '프로그램'에 따라서 결정될 뿐 '회원번호'과는 상관이 없습니다. 
그 경우 가격 컬럼은 partial dependency가 있다고 표현합니다. 

[수강등록현황 table]

회원번호	회원이름	프로그램	가격	납부여부
101	강호동	스쿼시초급	5000	0
102	손흥민	헬스	6000	1
103	김민수	헬스	6000	1
103	김민수	골프초급	8000	0
 

[프로그램 table]

프로그램	가격
스쿼시초급	5000
헬스	6000
골프초급	8000
 

'가격' 컬럼은 수강등록현황과 별로 상관이 없고 '프로그램' 종류에 따라서 결정될 뿐입니다.
그래서 '가격' 컬럼은 현재 테이블의 주제와 맞지 않기 때문에
그걸 잘라내서 새로운 테이블 만들어서 거기 넣어봤습니다.   
이 작업이 완료된 테이블을 제2정규형 (2nd normal form) 이라고 합니다.
장점은 아까처럼 '헬스'의 가격이 수정되어야할 때 100곳을 수정할 필요가 없어짐 
물론 이러면 단점도 있는데 나중에 김민수라는 사람이 얼마를 내야할지 조회하는게 귀찮아질 수 있는데
그건 나중에 SQL JOIN 문법 쓰면 됩니다. 
------------------------------------------------------------------------

제3정규화(3NF) : primary key와 전혀 관계가 없는 컬럼에 종속되어 있는 컬럼을 별도의 테이블로 생성
=> 일반적으로 제3정규화까지 함. (4 이상은 별로...)


제2정규형 테이블에서 transitive dependency도 제거해버리면 그게 제3정규형입니다. 

transitive dependency는 
1. composite primary key 또는 primary key 역할을 하는 컬럼이 있고  
2. primary key에 직접 종속된 컬럼A가 있고 
3. 또 컬럼A에 직접 종속된 하찮은 컬럼B가 있으면 
컬럼B가 primary key 컬럼에 transitive dependency 가 있다고 표현합니다. 
그래서 그 컬럼B를 다른 테이블로 옮기라는 소리입니다. 
옮기면 제3정규형을 만족하는 테이블이 완성됩니다. 

 
테이블을 쪼갤 때는... 첫 컬럼은 항상 primary key로 두는 것이 좋다.
다른 테이블의 데이터를 사용할 때는... [그 테이블의 primary key](foreign key)를 활용할 수 있으면 사용하는 것이 좋다.

컬럼에 foreign key(FK)를 등록하려면..
[1] 처음 생성 때 FK 설정하기.
CREATE TABLE 테이블명 (
    id INT PRIMARY KEY,
    프로그램 VARCHAR(100),
    강사id INT "REFERENCES 다른테이블(다른테이블컬럼)"
)
[2] 처음 생성 때 CONSTRAINT 문법 사용하기
CREATE TABLE 테이블명 (
    id INT,
    프로그램 VARCHAR(100),
    강사id INT,
    CONSTRAINT 제약조건작명 PRIMARY KEY (id), 
    CONSTRAINT 제약조건작명2 FOREIGN KEY (강사id) REFERENCES 다른테이블(다른테이블컬럼),
)
[3] 이미 존재하는 컬럼에 FK 설정하기.
ALTER TABLE 테이블명 ADD 
CONSTRAINT 제약조건작명 FOREIGN KEY (강사id) REFERENCES teacher(id) 

컬럼에 foreign key를 등록하면..
=> 원 테이블에서 해당 데이터 삭제를 방지할 수 있음!!!



