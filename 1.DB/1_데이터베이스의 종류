<Key-Value Database>
- 실용성은 상대적으로 떨어짐.
- 서브용 DB로 사용함
- 단, redis는 Key-Value Database이지만 데이터를 HDD가 아닌 RAM에 저장하므로 읽기속도가 매우 빠름..
- Main 디비는 따로 두고, 자주사용하는 데이터는 redis에 저장해 캐시용도로 사용한다.


<Relational Database> :: 관계형(행렬을 의미하는 Relational) DB
- Oracle, MySQL, PostgreSQL, MariaDB 등..
- 테이블형태로 데이터를 보관한다.
- 점유율 상위권 대부분을 차지한다.
- SQL 문법을 활용한다.
- 중복을 싫어해서 데이터를 정규화해서 사용한다... (데이터 중복이 발생하면 테이블을 계속해서 쪼개서 보관..!!)
- 이 문제로, 데이터 출력을 위한 문법이 복잡해짐.
- 트랜잭션 기반(ACID)으로되므로, 속도보다 데이터의 정확도가 중요한 경우(금전거래 등)에 사용한다.


<Graph Database>
- neo4j, orientDB, arangoDB 등..
- 데이터(노드)간의 관계를 기록하기 위한 db
- GQL 문법을 활용한다.
- 노드 사이에 방향화살표 등을 이용해 자료 간의 관계를 중점적으로 저장하고 싶을 때 사용
- 비행기 노선, SNS친구관계, 코로나전염경로 등..

<Document Database>
- mongoDB, CouchDB 등..
- collection이라는 폴더 안에 document라는 파일을 만들어서, 파일 안에 JSON 형태로 데이터를 저장한다.
- Relational DB와 다르게 어떤 데이터를 저장할지 미리 정의할 필요가 없어서 유연하다.
- 데이터의 중복제거(정규화) 작업을 하지 않으므로, 입출력 문법이 Relational DB에 비해 단순
- 데이터의 분산처리가 용이하다 (SNS, 실시간 채팅 등..) -- 단, DB 간의 데이터 일관성(정합성)이 좀 떨어짐.

<Column-family Database>
- cassandra, google bigtable 등..
- 테이블에 row를 만들어서 저장하지만, row마다 컬럼이 달라도 상관없다.
- 단, 입출력을 위해서는 자체적인 언어(문법)을 사용해야한다.
- 데이터의 중복제거(정규화)를 하지 않는다.
- 시계열로 데이터 저장할 때 활용

<Search engine>
- elastic search, cloudsearch
- index 보관용으로 사용
- index :: 데이터 검색을 빠르게 하기위해 색인/목차 등을 말한다.
- 평소에 사용하는 db에 활용가능.
- 실시간 검색어, 추천검색어, 검색어 오타교정 등..
- 검색이 중요한 경우 활용

**요약**
1. 일반적으로는 Relational db, Document DB 이용
2. 정확도가 중요하면 Relational db
3. 입출력이 잦으면 Document DB